#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl -8, %edx      # len = len - 8
	jle rest		# if so, goto rest:

Loop0:	
	mrmovl (%ebx), %esi	 # src[0]
	rmmovl %esi, (%ecx)	 # dst[0] = src[0]
	andl %esi, %esi		 # if src[0] <= 0, jump to loop1
	jle loop1		
	iaddl $1, %eax		 # else count++

loop1:
    mrmovl 4(%ebx), %esi	 # src[1]
    rmmovl %esi, 4(%ecx)	 # dst[1] = src[1]
    andl %esi, %esi		 # if src[1] <= 0, jump to loop2
    jle loop2		
    iaddl $1, %eax		 # else count++

loop2:
    mrmovl 8(%ebx), %esi	 # src[2]
    rmmovl %esi, 8(%ecx)	 # dst[2] = src[2]
    andl %esi, %esi		 # if src[2] <= 0, jump to loop3
    jle loop3		
    iaddl $1, %eax		 # else count++

loop3:
    mrmovl 12(%ebx), %esi	 # src[3]
    rmmovl %esi, 12(%ecx)	 # dst[3] = src[3]
    andl %esi, %esi		 # if src[3] <= 0, jump to loop4
    jle loop4		
    iaddl $1, %eax		 # else count++

loop4:
    mrmovl 16(%ebx), %esi	 # src[4]
    rmmovl %esi, 16(%ecx)	 # dst[4] = src[4]
    andl %esi, %esi		 # if src[4] <= 0, jump to loop5
    jle loop5		
    iaddl $1, %eax		 # else count++

loop5:
    mrmovl 20(%ebx), %esi	 # src[5]
    rmmovl %esi, 20(%ecx)	 # dst[5] = src[5]
    andl %esi, %esi		 # if src[5] <= 0, jump to loop6
    jle loop6		
    iaddl $1, %eax		 # else count++

loop6:
    mrmovl 24(%ebx), %esi	 # src[6]
    rmmovl %esi, 24(%ecx)	 # dst[6] = src[6]
    andl %esi, %esi		 # if src[6] <= 0, jump to loop7
    jle loop7		
    iaddl $1, %eax		 # else count++

loop7:
    mrmovl 28(%ebx), %esi	 # src[7]
    rmmovl %esi, 28(%ecx)	 # dst[7] = src[7]
    andl %esi, %esi		 # if src[7] <= 0, jump to loop8
    jle update		
    iaddl $1, %eax		 # else count++

update:
    iaddl $32, %ebx		# src += 8
    iaddl $32, %ecx		# dst += 8
    iaddl $-8, %edx		# len -= 8
    jg Loop0			# if so, goto Loop0, else goto rest

rest:
    iaddl $8, %edx		# len += 8
    jle Done			# if so, goto Done, else goto Loop

resloop:
    mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddl $1, %eax		# count++

Npos:	
	iaddl $4, %ebx		# src++
	iaddl $4, %ecx		# dst++
	iaddl $-1, %edx		# len--
	jg resloop		# if so, goto resloop, else goto Done
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
