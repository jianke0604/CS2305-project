#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl -6, %edx      # len = len - 6
	jl rest		        # if so, goto rest:

Loop0:	
	mrmovl (%ebx), %esi	     # src[0]
    mrmovl 4(%ebx), %edi	 # src[1]
	rmmovl %esi, (%ecx)	 # dst[0] = src[0]
	andl %esi, %esi		 # if src[0] <= 0, jump to loop1
	jle loop1		
	iaddl $1, %eax		 # else count++

loop1:
    mrmovl 8(%ebx), %esi	 # src[2]
    rmmovl %edi, 4(%ecx)	 # dst[1] = src[1]
    andl %edi, %edi		 # if src[1] <= 0, jump to loop2
    jle loop2		
    iaddl $1, %eax		 # else count++

loop2:
    mrmovl 12(%ebx), %edi	 # src[3]
    rmmovl %esi, 8(%ecx)	 # dst[2] = src[2]
    andl %esi, %esi		 # if src[2] <= 0, jump to loop3
    jle loop3		
    iaddl $1, %eax		 # else count++

loop3:
    mrmovl 16(%ebx), %esi	 # src[4]
    rmmovl %edi, 12(%ecx)	 # dst[3] = src[3]
    andl %edi, %edi		 # if src[3] <= 0, jump to loop4
    jle loop4		
    iaddl $1, %eax		 # else count++

loop4:
    mrmovl 20(%ebx), %edi	 # src[5]
    rmmovl %esi, 16(%ecx)	 # dst[4] = src[4]
    andl %esi, %esi		 # if src[4] <= 0, jump to loop5
    jle loop5		
    iaddl $1, %eax		 # else count++

loop5:
    # mrmovl 24(%ebx), %esi	 # src[6]
    rmmovl %edi, 20(%ecx)	 # dst[5] = src[5]
    andl %edi, %edi		 # if src[5] <= 0, jump to update
    jle update	
    iaddl $1, %eax		 # else count++

update:
    iaddl $24, %ebx		# src += 6
    iaddl $24, %ecx		# dst += 6
    iaddl $-6, %edx		# len -= 6
    jge Loop0			# if so, goto Loop0, else goto rest

# Now we have len <= 6, then we can build a binary search tree to find len
# notice that %edx = len - 6, it can be {-6, -5, -4, -3, -2, -1, 0}
# when len%6=0, have bug?
# bug fixed! Just modifie jg to jge and jle to jl

rest:
    iaddl $3, %edx		# len += 3 {-3, -2, -1, 0, 1, 2, 3}
    jl searchleft       #{-3, -2, -1}
    je resloop3_1      # len = 3
    iaddl -1, %edx		
    je resloop4_1      # len = 4
    jmp resloop5_1     # len = 5

searchleft:
    iaddl $2, %edx		# len += 2 {-1, 0, 1}
    jl Done
    mrmovl (%ebx), %esi	# read val from src...
    je resloop1_1      # len = 1
    jmp resloop2_1     # len = 2

resloop1_1:
    rmmovl %esi, (%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop2_1:
    mrmovl 4(%ebx), %edi	# read val from src...
    rmmovl %esi, (%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle resloop2_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop2_2:
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
    andl %edi, %edi		# val <= 0?
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop3_1:
    mrmovl (%ebx), %esi	    # read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
    rmmovl %esi, (%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle resloop3_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop3_2:
    rmmovl %edi, 4(%ecx)	# store it to dst
    mrmovl 8(%ebx), %esi	# read val from src...
    andl %edi, %edi		# val <= 0?
    jle resloop3_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop3_3:
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop4_1:
    mrmovl (%ebx), %esi	    # read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
    rmmovl %esi, (%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle resloop4_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop4_2:
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
    mrmovl 8(%ebx), %esi	# read val from src...
    andl %edi, %edi		# val <= 0?
    jle resloop4_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop4_3:
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
    mrmovl 12(%ebx), %edi	# read val from src...
    andl %esi, %esi		# val <= 0?
    jle resloop4_4		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop4_4:
    rmmovl %edi, 12(%ecx)	# ...and store it to dst
    andl %edi, %edi		# val <= 0?
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++
    jmp Done

resloop5_1:
    mrmovl (%ebx), %esi	    # read val from src...
    mrmovl 4(%ebx), %edi	# read val from src...
    rmmovl %esi, (%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle resloop5_2		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_2:
    rmmovl %edi, 4(%ecx)	# ...and store it to dst
    mrmovl 8(%ebx), %esi	# read val from src...
    andl %edi, %edi		# val <= 0?
    jle resloop5_3		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_3:
    rmmovl %esi, 8(%ecx)	# ...and store it to dst
    mrmovl 12(%ebx), %edi	# read val from src...
    andl %esi, %esi		# val <= 0?
    jle resloop5_4		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_4:
    rmmovl %edi, 12(%ecx)	# ...and store it to dst
    mrmovl 16(%ebx), %esi	# read val from src...
    andl %edi, %edi		# val <= 0?
    jle resloop5_5		# if so, goto Npos:
    iaddl $1, %eax		# count++

resloop5_5:
    rmmovl %esi, 16(%ecx)	# ...and store it to dst
    andl %esi, %esi		# val <= 0?
    jle Done		# if so, goto Npos:
    iaddl $1, %eax		# count++

# rest:
#     iaddl $6, %edx		# len += 6
#     jle Done			# if so, goto Done, else goto Loop

# resloop:
#     mrmovl (%ebx), %esi	# read val from src...
# 	rmmovl %esi, (%ecx)	# ...and store it to dst
# 	andl %esi, %esi		# val <= 0?
# 	jle Npos		# if so, goto Npos:
# 	iaddl $1, %eax		# count++

# Npos:	
# 	iaddl $4, %ebx		# src++
# 	iaddl $4, %ecx		# dst++
# 	iaddl $-1, %edx		# len--
# 	jg resloop		# if so, goto resloop, else goto Done
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
