                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x002: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x004: a06f         | 	pushl %esi		# Save callee-save regs
  0x006: a03f         | 	pushl %ebx
  0x008: a07f         | 	pushl %edi
  0x00a: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x010: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x016: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x01c: 6300         | 	xorl %eax,%eax		# count = 0;
  0x01e: c0f2f8ffffff | 	iaddl -8, %edx      # len = len - 8
  0x024: 7108010000   | 	jle rest		# if so, goto rest:
                      | 
  0x029:              | Loop0:	
  0x029: 506300000000 | 	mrmovl (%ebx), %esi	 # src[0]
  0x02f: 406100000000 | 	rmmovl %esi, (%ecx)	 # dst[0] = src[0]
  0x035: 6266         | 	andl %esi, %esi		 # if src[0] <= 0, jump to loop1
  0x037: 7142000000   | 	jle loop1		
  0x03c: c0f001000000 | 	iaddl $1, %eax		 # else count++
                      | 
  0x042:              | loop1:
  0x042: 506304000000 |     mrmovl 4(%ebx), %esi	 # src[1]
  0x048: 406104000000 |     rmmovl %esi, 4(%ecx)	 # dst[1] = src[1]
  0x04e: 6266         |     andl %esi, %esi		 # if src[1] <= 0, jump to loop2
  0x050: 715b000000   |     jle loop2		
  0x055: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x05b:              | loop2:
  0x05b: 506308000000 |     mrmovl 8(%ebx), %esi	 # src[2]
  0x061: 406108000000 |     rmmovl %esi, 8(%ecx)	 # dst[2] = src[2]
  0x067: 6266         |     andl %esi, %esi		 # if src[2] <= 0, jump to loop3
  0x069: 7174000000   |     jle loop3		
  0x06e: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x074:              | loop3:
  0x074: 50630c000000 |     mrmovl 12(%ebx), %esi	 # src[3]
  0x07a: 40610c000000 |     rmmovl %esi, 12(%ecx)	 # dst[3] = src[3]
  0x080: 6266         |     andl %esi, %esi		 # if src[3] <= 0, jump to loop4
  0x082: 718d000000   |     jle loop4		
  0x087: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x08d:              | loop4:
  0x08d: 506310000000 |     mrmovl 16(%ebx), %esi	 # src[4]
  0x093: 406110000000 |     rmmovl %esi, 16(%ecx)	 # dst[4] = src[4]
  0x099: 6266         |     andl %esi, %esi		 # if src[4] <= 0, jump to loop5
  0x09b: 71a6000000   |     jle loop5		
  0x0a0: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x0a6:              | loop5:
  0x0a6: 506314000000 |     mrmovl 20(%ebx), %esi	 # src[5]
  0x0ac: 406114000000 |     rmmovl %esi, 20(%ecx)	 # dst[5] = src[5]
  0x0b2: 6266         |     andl %esi, %esi		 # if src[5] <= 0, jump to loop6
  0x0b4: 71bf000000   |     jle loop6		
  0x0b9: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x0bf:              | loop6:
  0x0bf: 506318000000 |     mrmovl 24(%ebx), %esi	 # src[6]
  0x0c5: 406118000000 |     rmmovl %esi, 24(%ecx)	 # dst[6] = src[6]
  0x0cb: 6266         |     andl %esi, %esi		 # if src[6] <= 0, jump to loop7
  0x0cd: 71d8000000   |     jle loop7		
  0x0d2: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x0d8:              | loop7:
  0x0d8: 50631c000000 |     mrmovl 28(%ebx), %esi	 # src[7]
  0x0de: 40611c000000 |     rmmovl %esi, 28(%ecx)	 # dst[7] = src[7]
  0x0e4: 6266         |     andl %esi, %esi		 # if src[7] <= 0, jump to loop8
  0x0e6: 71f1000000   |     jle update		
  0x0eb: c0f001000000 |     iaddl $1, %eax		 # else count++
                      | 
  0x0f1:              | update:
  0x0f1: c0f320000000 |     iaddl $32, %ebx		# src += 8
  0x0f7: c0f120000000 |     iaddl $32, %ecx		# dst += 8
  0x0fd: c0f2f8ffffff |     iaddl $-8, %edx		# len -= 8
  0x103: 7629000000   |     jg Loop0			# if so, goto Loop0, else goto rest
                      | 
  0x108:              | rest:
  0x108: c0f208000000 |     iaddl $8, %edx		# len += 8
  0x10e: 7143010000   |     jle Done			# if so, goto Done, else goto Loop
                      | 
  0x113:              | resloop:
  0x113: 506300000000 |     mrmovl (%ebx), %esi	# read val from src...
  0x119: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x11f: 6266         | 	andl %esi, %esi		# val <= 0?
  0x121: 712c010000   | 	jle Npos		# if so, goto Npos:
  0x126: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x12c:              | Npos:	
  0x12c: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x132: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x138: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x13e: 7613010000   | 	jg resloop		# if so, goto resloop, else goto Done
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x143:              | Done:
  0x143: b07f         | 	popl %edi               # Restore callee-save registers
  0x145: b03f         | 	popl %ebx
  0x147: b06f         | 	popl %esi
  0x149: 2054         | 	rrmovl %ebp, %esp
  0x14b: b05f         | 	popl %ebp
  0x14d: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x14e:              | End:
                      | #/* $end ncopy-ys */
